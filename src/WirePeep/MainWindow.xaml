<m:ExtendedWindow x:Class="WirePeep.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:m="http://menees.com/xaml"
		xmlns:local="clr-namespace:WirePeep"
		mc:Ignorable="d"
		Title="WirePeep - Network Downtime Monitor" Height="450" Width="800">

	<Window.CommandBindings>
		<CommandBinding Command="local:Commands.AddLocation" Executed="AddLocationExecuted" />
		<CommandBinding Command="local:Commands.Exit" Executed="ExitExecuted" />
		<CommandBinding Command="local:Commands.ExportLog" Executed="ExportLogExecuted" />
		<CommandBinding Command="local:Commands.ViewOptions" Executed="ViewOptionsExecuted" />
		<CommandBinding Command="Help" Executed="HelpExecuted" />
		<CommandBinding Command="local:Commands.About" Executed="AboutExecuted" />
	</Window.CommandBindings>

	<Window.Resources>
		<local:StatusRowCollection x:Key="StatusRows"/>
		<local:LogRowCollection x:Key="LogRows"/>

		<CollectionViewSource x:Key="StatusRowsView" Source="{StaticResource StatusRows}">
			<CollectionViewSource.GroupDescriptions>
				<PropertyGroupDescription PropertyName="GroupName"/>
			</CollectionViewSource.GroupDescriptions>
		</CollectionViewSource>

		<CollectionViewSource x:Key="LogRowsView" Source="{StaticResource LogRows}"/>

		<Style x:Key="VCenterText" TargetType="TextBlock">
			<Setter Property="VerticalAlignment" Value="Center"/>
		</Style>

		<Style x:Key="ListViewGrid" TargetType="DataGrid">
			<Setter Property="IsReadOnly" Value="True"/>
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
			<Setter Property="CanUserReorderColumns" Value="False"/>
			<Setter Property="CanUserSortColumns" Value="False"/>
			<Setter Property="GridLinesVisibility" Value="None"/>
			<Setter Property="AutoGenerateColumns" Value="False"/>
			<Setter Property="CanUserResizeRows" Value="False"/>
			<Setter Property="HeadersVisibility" Value="Column"/>
		</Style>

		<!-- Note: These geometries assume they're drawn in a 24x24 Canvas. Wrap the Canvas in a ViewBox to scale it up or down. -->
		<!-- https://materialdesignicons.com/icon/check-bold -->
		<Geometry x:Key="ConnectedPathData">
			M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z
		</Geometry>
		<!-- https://materialdesignicons.com/icon/close-thick -->
		<Geometry x:Key="DisconnectedPathData">
			M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z
		</Geometry>

		<Style x:Key="StatusGroupHeaderStyle" TargetType="GroupItem">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="GroupItem">
						<!-- I originally used an Expander control like this: https://www.c-sharpcorner.com/uploadfile/dpatra/grouping-in-datagrid-in-wpf/
						But it was ugly, not that useful, and would have required persisting the expanded state of each group. -->
						<StackPanel>
							<DockPanel>
								<!-- The DataContext here is a CollectionViewGroup (based on the PropertyGroupDescription.) -->
								<!-- DataTrigger idea came from https://stackoverflow.com/a/8534694/1882616. -->
								<DockPanel.Style>
									<Style TargetType="DockPanel">
										<!-- Default to light green; switch to light red if group isn't accessible. -->
										<Setter Property="Background" Value="#FFD2FFD2"/>
										<Style.Triggers>
											<DataTrigger Binding="{Binding Items[0].IsGroupAccessible}" Value="False">
												<Setter Property="Background" Value="#FFFFD2D2"/>
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</DockPanel.Style>
								<Viewbox Height="22" Margin="1">
									<Canvas Width="24" Height="24">
										<Path>
											<Path.Style>
												<Style TargetType="Path">
													<Setter Property="Fill" Value="Green"/>
													<Setter Property="Data" Value="{StaticResource ConnectedPathData}"/>
													<Style.Triggers>
														<DataTrigger Binding="{Binding Items[0].IsGroupAccessible}" Value="False">
															<Setter Property="Fill" Value="Red"/>
															<Setter Property="Data" Value="{StaticResource DisconnectedPathData}"/>
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</Path.Style>
										</Path>
									</Canvas>
								</Viewbox>
								<TextBlock Text="{Binding Name}" FontWeight="Bold" Style="{StaticResource VCenterText}"/>
								<TextBlock Text="  —  Poll every " Style="{StaticResource VCenterText}"/>
								<TextBlock Text="{Binding Items[0].GroupPollSeconds}" Style="{StaticResource VCenterText}"/>
								<TextBlock Text="s.  Wait " Style="{StaticResource VCenterText}"/>
								<TextBlock Text="{Binding Items[0].GroupWaitMilliseconds}" Style="{StaticResource VCenterText}"/>
								<TextBlock Text="ms.  Fail after " Style="{StaticResource VCenterText}"/>
								<TextBlock Text="{Binding Items[0].GroupFailSeconds}" Style="{StaticResource VCenterText}"/>
								<TextBlock Text="s outage." Style="{StaticResource VCenterText}"/>
							</DockPanel>
							<ItemsPresenter />
						</StackPanel>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="TextBlock" x:Key="RightAlignCell">
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="TextAlignment" Value="Right"/>
		</Style>
	</Window.Resources>

	<Grid x:Name="windowLayoutGrid">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition MinHeight="25"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition MinHeight="25"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<Menu Grid.Row="0" Padding="2">
			<MenuItem Header="_View">
				<MenuItem Header="_Add Location..." Command="local:Commands.AddLocation"/>
				<MenuItem Header="_Export Log..." Command="local:Commands.ExportLog"/>
				<Separator/>
				<MenuItem Header="_Options..." Command="local:Commands.ViewOptions"/>
				<Separator/>
				<MenuItem Header="E_xit" Command="local:Commands.Exit"/>
			</MenuItem>
			<MenuItem Header="_Help">
				<MenuItem Header="_WirePeep.com" Command="Help"/>
				<MenuItem Header="_About..." Command="local:Commands.About"/>
			</MenuItem>
		</Menu>

		<DataGrid x:Name="statusGrid" Grid.Row="1" ItemsSource="{Binding Source={StaticResource StatusRowsView}}" Style="{StaticResource ListViewGrid}">
			<DataGrid.GroupStyle>
				<GroupStyle ContainerStyle="{StaticResource StatusGroupHeaderStyle}">
					<GroupStyle.Panel>
						<ItemsPanelTemplate>
							<DataGridRowsPresenter/>
						</ItemsPanelTemplate>
					</GroupStyle.Panel>
				</GroupStyle>
			</DataGrid.GroupStyle>

			<DataGrid.Columns>
				<DataGridTemplateColumn Header="Poll">
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<Viewbox Height="16">
							<Canvas Width="24" Height="24">
								<Path>
									<Path.Style>
										<Style TargetType="Path">
											<Style.Triggers>
												<!-- IsLocationConnected is a bool? with a null default, so we show no Path for that. -->
												<DataTrigger Binding="{Binding IsLocationConnected}" Value="True">
													<Setter Property="Data" Value="{StaticResource ConnectedPathData}"/>
												</DataTrigger>
												<DataTrigger Binding="{Binding IsLocationConnected}" Value="False">
													<Setter Property="Data" Value="{StaticResource DisconnectedPathData}"/>
												</DataTrigger>
												<!-- MultiDataTrigger idea came from https://stackoverflow.com/a/42343062/1882616. -->
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding IsLocationConnected}" Value="False" />
														<Condition Binding="{Binding IsLocationUpToDate}" Value="False" />
													</MultiDataTrigger.Conditions>
													<!-- 75% transparent red -->
													<Setter Property="Fill" Value="#40FF0000"/>
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding IsLocationConnected}" Value="False" />
														<Condition Binding="{Binding IsLocationUpToDate}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Fill" Value="Red"/>
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding IsLocationConnected}" Value="True" />
														<Condition Binding="{Binding IsLocationUpToDate}" Value="False" />
													</MultiDataTrigger.Conditions>
													<!-- 75% transparent green -->
													<Setter Property="Fill" Value="#40008000"/>
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding IsLocationConnected}" Value="True" />
														<Condition Binding="{Binding IsLocationUpToDate}" Value="True" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Fill" Value="Green"/>
												</MultiDataTrigger>
											</Style.Triggers>
										</Style>
									</Path.Style>
								</Path>
							</Canvas>
						</Viewbox>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
				<DataGridTextColumn Header="Name" Binding="{Binding LocationName}"/>
				<DataGridTextColumn Header="IP Address" Binding="{Binding LocationAddress}"/>
				<DataGridTextColumn Header="Response (ms)" Binding="{Binding LocationRoundtripMilliseconds}" ElementStyle="{StaticResource RightAlignCell}"/>
			</DataGrid.Columns>
		</DataGrid>

		<GridSplitter x:Name="splitter" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" ShowsPreview="True" Height="4" />

		<DataGrid x:Name="logGrid" Grid.Row="3" ItemsSource="{Binding Source={StaticResource LogRowsView}}" Style="{StaticResource ListViewGrid}">
			<DataGrid.Resources>
				<Style TargetType="TextBlock" x:Key="RedIfActive">
					<Setter Property="Margin" Value="2,0,2,0"/>
					<Style.Triggers>
						<!-- TODO: Use MultiDataTrigger to only do this if the row isn't selected. [Bill, 5/16/2020] -->
						<DataTrigger Binding="{Binding IsActive}" Value="True">
							<Setter Property="Foreground" Value="Red"/>
						</DataTrigger>
					</Style.Triggers>
				</Style>
				<Style TargetType="TextBlock" x:Key="RedIfActive-RightAlign" BasedOn="{StaticResource RedIfActive}">
					<Setter Property="HorizontalAlignment" Value="Stretch"/>
					<Setter Property="TextAlignment" Value="Right"/>
				</Style>
			</DataGrid.Resources>
			<DataGrid.Columns>
				<DataGridTextColumn Header="Peer Group" Binding="{Binding PeerGroupName}" ElementStyle="{StaticResource RedIfActive}"/>
				<DataGridTextColumn Header="Start" Binding="{Binding FailStarted}" ElementStyle="{StaticResource RedIfActive}"/>
				<DataGridTextColumn Header="Length" Binding="{Binding Length}" ElementStyle="{StaticResource RedIfActive-RightAlign}"/>
				<DataGridTextColumn Header="End" Binding="{Binding FailEnded}" ElementStyle="{StaticResource RedIfActive}"/>
				<DataGridTextColumn Header="Since Previous" Binding="{Binding SincePrevious}" ElementStyle="{StaticResource RedIfActive-RightAlign}"/>
				<DataGridTextColumn Header="Comment" Binding="{Binding Comment}" ElementStyle="{StaticResource RedIfActive}"/>
			</DataGrid.Columns>
		</DataGrid>

		<StatusBar Grid.Row="4">
			<StatusBarItem>
				<TextBlock>Monitored time:</TextBlock>
			</StatusBarItem>
			<StatusBarItem>
				<TextBlock x:Name="monitoredTime">0:00:00</TextBlock>
			</StatusBarItem>
			<Separator/>
			<StatusBarItem>
				<TextBlock>Failure count:</TextBlock>
			</StatusBarItem>
			<StatusBarItem>
				<TextBlock Text="{Binding Source={StaticResource LogRows}, Path=Count}"/>
			</StatusBarItem>
		</StatusBar>
	</Grid>
</m:ExtendedWindow>
