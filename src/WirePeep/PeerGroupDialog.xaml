<m:ExtendedDialog x:Class="WirePeep.PeerGroupDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:m="http://menees.com/xaml"
        xmlns:local="clr-namespace:WirePeep"
        mc:Ignorable="d"
        Title="Edit Peer Groups" Width="400" Height="250"
		FocusManager.FocusedElement="{Binding ElementName=grid}">
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<DataGrid x:Name="grid" Margin="12" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
				  GridLinesVisibility="Horizontal" AutoGenerateColumns="False" CanUserReorderColumns="False" CanUserSortColumns="False"
				  AlternatingRowBackground="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}" CanUserResizeRows="False" CanUserResizeColumns="False"
				  HorizontalGridLinesBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" SelectionMode="Single"
				  CommandManager.PreviewCanExecute="GridPreviewCanExecute" InitializingNewItem="GridInitializingNewItem">
			<DataGrid.Resources>
				<Style TargetType="TextBlock" x:Key="RightAlignCell">
					<Setter Property="HorizontalAlignment" Value="Stretch"/>
					<Setter Property="TextAlignment" Value="Right"/>
				</Style>

				<Style TargetType="TextBox" x:Key="RightAlignEdit">
					<Setter Property="HorizontalAlignment" Value="Stretch"/>
					<Setter Property="TextAlignment" Value="Right"/>
				</Style>
			</DataGrid.Resources>

			<DataGrid.Columns>
				<DataGridTextColumn Header="Peer Group" Width="*">
					<DataGridTextColumn.Binding>
						<Binding Path="Name">
							<Binding.ValidationRules>
								<!-- To get a red border around the cell's TextBox, we have to validate the value before it is assigned
								to the GridRow's Name property. If we wait for the assignment to throw an exception, the edit mode is
								over and the visual is back to a TextBlock (with no red border). Forcing a manual ValidationRule does
								the trick. It's not necessary for the other columns because they're ushort values, so WPF knows it has
								to do a string-to-UInt16 converter before it finishes edit mode and tries the property assignment.
								https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.validation.errors#remarks -->
								<m:NonEmptyTextValidationRule ErrorMessage="Please enter a peer group name."/>
								<!-- This validation rule is useful if the Name property setter throws some exception, but that will be
								after the edit mode is finished. -->
								<ExceptionValidationRule/>
							</Binding.ValidationRules>
						</Binding>
					</DataGridTextColumn.Binding>
				</DataGridTextColumn>
				<DataGridTextColumn Header="Poll (sec)" Binding="{Binding Poll, ValidatesOnExceptions=True}" ElementStyle="{StaticResource RightAlignCell}" EditingElementStyle="{StaticResource RightAlignEdit}"/>
				<DataGridTextColumn Header="Wait (ms)" Binding="{Binding Wait, ValidatesOnExceptions=True}" ElementStyle="{StaticResource RightAlignCell}" EditingElementStyle="{StaticResource RightAlignEdit}"/>
				<DataGridTextColumn Header="Fail (sec)" Binding="{Binding Fail, ValidatesOnExceptions=True}" ElementStyle="{StaticResource RightAlignCell}" EditingElementStyle="{StaticResource RightAlignEdit}"/>
			</DataGrid.Columns>
		</DataGrid>

		<Border Grid.Row="1" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
			<StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
				<Button Content="_OK" Width="60" Margin="12,12,0,12" IsDefault="True" Click="OKClicked"/>
				<Button Content="_Cancel" Width="60" Margin="12" IsCancel="True"/>
			</StackPanel>
		</Border>
	</Grid>

</m:ExtendedDialog>
